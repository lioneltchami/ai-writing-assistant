'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { PenTool, Sparkles, BookOpen, Github, Settings, Wand2, Copy } from 'lucide-react'

type ActiveTab = 'generate' | 'optimize'

// Working Header Component
function Header() {
  return (
    <motion.header
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="glass-effect border-b border-white/20"
    >
      <div className="container mx-auto px-4 py-4">
        <div className="flex justify-between items-center">
          <div className="flex items-center space-x-2">
            <BookOpen className="w-8 h-8 text-indigo-600" />
            <span className="text-xl font-bold text-gray-800">AI Writer Pro</span>
          </div>
          
          <nav className="hidden md:flex items-center space-x-6">
            <button className="text-gray-600 hover:text-indigo-600 transition-colors">
              Features
            </button>
            <button className="text-gray-600 hover:text-indigo-600 transition-colors">
              API Settings
            </button>
          </nav>

          <div className="flex items-center space-x-3">
            <a
              href="https://github.com"
              target="_blank"
              rel="noopener noreferrer"
              className="p-2 text-gray-600 hover:text-indigo-600 transition-colors rounded-md hover:bg-white/50"
            >
              <Github className="w-5 h-5" />
            </a>
            <button 
              onClick={() => alert('Welcome to AI Writer Pro!')}
              className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors shadow-md"
            >
              Get Started
            </button>
          </div>
        </div>
      </div>
    </motion.header>
  )
}

// Working Content Generator Component
function ContentGenerator() {
  const [topic, setTopic] = useState('')
  const [keywords, setKeywords] = useState('')
  const [wordCount, setWordCount] = useState(500)
  const [generatedContent, setGeneratedContent] = useState('')
  const [isGenerating, setIsGenerating] = useState(false)

  const handleGenerate = () => {
    if (!topic.trim()) {
      alert('Please enter a topic!')
      return
    }
    
    setIsGenerating(true)
    
    // Simulate content generation
    setTimeout(() => {
      const sampleContent = `# ${topic}

This is a sample generated article about ${topic}. 

## Introduction
${topic} is an important topic that deserves detailed exploration. ${keywords ? `Key aspects include: ${keywords}.` : ''}

## Main Content
Here's where the main content would appear. This is a demonstration of the AI Writing Assistant's content generation capabilities.

## Key Points
- Professional content structure
- Keyword integration: ${keywords || 'No keywords specified'}
- Target length: ${wordCount} words
- Generated with AI assistance

## Conclusion
This concludes our comprehensive look at ${topic}. The content has been structured to meet your specified requirements and can be further edited as needed.

*Generated by AI Writer Pro - Your Professional Writing Assistant*`

      setGeneratedContent(sampleContent)
      setIsGenerating(false)
    }, 2000)
  }

  const handleCopy = () => {
    if (generatedContent) {
      navigator.clipboard.writeText(generatedContent)
      alert('Content copied to clipboard!')
    }
  }

  const handleExport = () => {
    if (generatedContent) {
      const blob = new Blob([generatedContent], { type: 'text/markdown' })
      const url = URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.href = url
      a.download = `${topic.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.md`
      document.body.appendChild(a)
      a.click()
      document.body.removeChild(a)
      URL.revokeObjectURL(url)
    }
  }

  return (
    <div className="max-w-7xl mx-auto">
      <div className="grid lg:grid-cols-3 gap-8">
        {/* Settings Panel */}
        <div className="lg:col-span-1">
          <div className="glass-effect rounded-xl p-6 shadow-xl">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-gray-800">Content Settings</h2>
              <button 
                onClick={() => alert('API Settings - Configure your OpenAI, Claude, or other API keys here!')}
                className="p-2 text-gray-600 hover:text-indigo-600 transition-colors rounded-md hover:bg-white/50"
                title="API Settings"
              >
                <Settings className="w-4 h-4" />
              </button>
            </div>

            <div className="space-y-6">
              {/* Topic Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Topic *
                </label>
                <input
                  type="text"
                  value={topic}
                  onChange={(e) => setTopic(e.target.value)}
                  placeholder="Enter your article topic..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
              </div>

              {/* Keywords Input */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Keywords (separated by commas)
                </label>
                <input
                  type="text"
                  value={keywords}
                  onChange={(e) => setKeywords(e.target.value)}
                  placeholder="keyword1, keyword2, keyword3..."
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-transparent"
                />
              </div>

              {/* Word Count */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Target Word Count: {wordCount}
                </label>
                <input
                  type="range"
                  min="100"
                  max="5000"
                  value={wordCount}
                  onChange={(e) => setWordCount(parseInt(e.target.value))}
                  className="w-full"
                />
                <div className="flex justify-between text-xs text-gray-500 mt-1">
                  <span>100</span>
                  <span>5000</span>
                </div>
              </div>

              {/* Style Editor Button */}
              <button
                onClick={() => alert('Style Editor - Customize writing style, tone, structure, and more!')}
                className="w-full px-4 py-2 bg-purple-100 text-purple-700 rounded-md hover:bg-purple-200 transition-colors border border-purple-300"
              >
                <Wand2 className="w-4 h-4 inline mr-2" />
                Style Editor
              </button>

              {/* Generate Button */}
              <button
                onClick={handleGenerate}
                disabled={isGenerating || !topic.trim()}
                className="w-full px-4 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors shadow-md font-medium"
              >
                {isGenerating ? (
                  <>
                    <div className="animate-spin inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                    Generating...
                  </>
                ) : (
                  <>
                    <Wand2 className="w-4 h-4 inline mr-2" />
                    Generate Content
                  </>
                )}
              </button>
            </div>
          </div>
        </div>

        {/* Content Panel */}
        <div className="lg:col-span-2">
          <div className="glass-effect rounded-xl shadow-xl overflow-hidden">
            <div className="p-6 border-b border-gray-200/50">
              <div className="flex items-center justify-between">
                <h2 className="text-xl font-semibold text-gray-800">Generated Content</h2>
                <div className="flex space-x-2">
                  <button
                    onClick={handleCopy}
                    disabled={!generatedContent}
                    className="px-3 py-1 text-sm bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    <Copy className="w-4 h-4 inline mr-1" />
                    Copy
                  </button>
                  <button
                    onClick={handleExport}
                    disabled={!generatedContent}
                    className="px-3 py-1 text-sm bg-green-100 text-green-600 rounded-md hover:bg-green-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    Export MD
                  </button>
                </div>
              </div>
            </div>

            <div className="p-6">
              {isGenerating ? (
                <div className="flex flex-col items-center justify-center py-12">
                  <div className="animate-spin w-12 h-12 border-4 border-indigo-200 border-t-indigo-600 rounded-full mb-4"></div>
                  <p className="text-gray-600">Generating high-quality content...</p>
                </div>
              ) : generatedContent ? (
                <div className="space-y-4">
                  <textarea
                    value={generatedContent}
                    onChange={(e) => setGeneratedContent(e.target.value)}
                    className="w-full h-96 border-0 outline-none resize-none text-gray-700 leading-relaxed"
                  />
                  <div className="text-sm text-gray-500 pt-4 border-t border-gray-200">
                    Words: {generatedContent.split(' ').length} | Characters: {generatedContent.length}
                  </div>
                </div>
              ) : (
                <div className="text-center py-12 text-gray-500">
                  <Wand2 className="w-12 h-12 mx-auto mb-4 opacity-50" />
                  <p>Your generated content will appear here</p>
                  <p className="text-sm mt-2">Enter a topic and click &ldquo;Generate Content&rdquo; to get started</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

// Working Text Optimizer Component
function TextOptimizer() {
  const [inputText, setInputText] = useState('')
  const [optimizedText, setOptimizedText] = useState('')
  const [isOptimizing, setIsOptimizing] = useState(false)

  const handleOptimize = () => {
    if (!inputText.trim()) {
      alert('Please enter text to optimize!')
      return
    }
    
    setIsOptimizing(true)
    
    // Simulate text optimization
    setTimeout(() => {
      const optimized = `${inputText}

---

OPTIMIZATION ANALYSIS:
✅ Enhanced readability and flow
✅ Improved sentence variety and structure  
✅ Added natural conversational elements
✅ Optimized for human-like characteristics
✅ Reduced AI detection markers

This text has been optimized using advanced algorithms to improve naturalness, readability, and human-like characteristics while preserving the original meaning and intent.`

      setOptimizedText(optimized)
      setIsOptimizing(false)
    }, 1500)
  }

  const handleCopyOptimized = () => {
    if (optimizedText) {
      navigator.clipboard.writeText(optimizedText)
      alert('Optimized text copied to clipboard!')
    }
  }

  return (
    <div className="max-w-7xl mx-auto">
      <div className="grid lg:grid-cols-3 gap-8">
        {/* Settings Panel */}
        <div className="lg:col-span-1">
          <div className="glass-effect rounded-xl p-6 shadow-xl">
            <h2 className="text-xl font-semibold text-gray-800 mb-6">Optimization Settings</h2>
            
            <div className="space-y-4 mb-6">
              <div className="p-4 border-2 border-indigo-500 bg-indigo-50 rounded-lg">
                <h3 className="font-medium text-indigo-800 mb-2">Human Writing Optimization</h3>
                <p className="text-sm text-indigo-600">Comprehensive optimization of seven key writing characteristics</p>
              </div>
              
              <div className="p-4 border-2 border-gray-200 hover:border-indigo-300 rounded-lg cursor-pointer">
                <h3 className="font-medium text-gray-800 mb-2">AI Modification Guidance</h3>
                <p className="text-sm text-gray-600">Analyze and generate personalized rewriting strategies</p>
              </div>
              
              <div className="p-4 border-2 border-gray-200 hover:border-indigo-300 rounded-lg cursor-pointer">
                <h3 className="font-medium text-gray-800 mb-2">Custom Optimization</h3>
                <p className="text-sm text-gray-600">Use your own custom optimization instructions</p>
              </div>
            </div>

            <button
              onClick={handleOptimize}
              disabled={isOptimizing || !inputText.trim()}
              className="w-full px-4 py-3 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors shadow-md font-medium"
            >
              {isOptimizing ? (
                <>
                  <div className="animate-spin inline-block w-4 h-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                  Optimizing...
                </>
              ) : (
                <>
                  <Sparkles className="w-4 h-4 inline mr-2" />
                  Optimize Text
                </>
              )}
            </button>
          </div>
        </div>

        {/* Text Input/Output Panel */}
        <div className="lg:col-span-2">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Input Text */}
            <div className="glass-effect rounded-xl shadow-xl">
              <div className="p-4 border-b border-gray-200/50">
                <h3 className="text-lg font-semibold text-gray-800">Original Text</h3>
                <p className="text-sm text-gray-600 mt-1">Paste your text here to optimize</p>
              </div>
              <div className="p-4">
                <textarea
                  value={inputText}
                  onChange={(e) => setInputText(e.target.value)}
                  placeholder="Paste the text you want to optimize here..."
                  className="w-full h-64 border-0 outline-none resize-none text-gray-700 placeholder-gray-400"
                />
                <div className="mt-2 text-xs text-gray-500">
                  Characters: {inputText.length}
                </div>
              </div>
            </div>

            {/* Optimized Text */}
            <div className="glass-effect rounded-xl shadow-xl">
              <div className="p-4 border-b border-gray-200/50">
                <div className="flex items-center justify-between">
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800">Optimized Text</h3>
                    <p className="text-sm text-gray-600 mt-1">AI-optimized version</p>
                  </div>
                  <button
                    onClick={handleCopyOptimized}
                    disabled={!optimizedText}
                    className="px-3 py-1 text-sm bg-green-100 text-green-600 rounded-md hover:bg-green-200 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
                  >
                    <Copy className="w-4 h-4 inline mr-1" />
                    Copy
                  </button>
                </div>
              </div>
              <div className="p-4">
                {isOptimizing ? (
                  <div className="flex flex-col items-center justify-center py-12">
                    <div className="animate-spin w-8 h-8 border-4 border-indigo-200 border-t-indigo-600 rounded-full mb-4"></div>
                    <p className="text-gray-600">Optimizing your text...</p>
                  </div>
                ) : optimizedText ? (
                  <>
                    <textarea
                      value={optimizedText}
                      readOnly
                      className="w-full h-64 border-0 outline-none resize-none text-gray-700 bg-gray-50"
                    />
                    <div className="mt-2 text-xs text-gray-500">
                      Characters: {optimizedText.length}
                    </div>
                  </>
                ) : (
                  <div className="text-center py-12 text-gray-500">
                    <Sparkles className="w-12 h-12 mx-auto mb-4 opacity-50" />
                    <p>Your optimized text will appear here</p>
                    <p className="text-sm mt-2">Enter text and click &ldquo;Optimize Text&rdquo; to get started</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default function Home() {
  const [activeTab, setActiveTab] = useState<ActiveTab>('generate')

  return (
    <div className="min-h-screen">
      <Header />
      
      <main className="container mx-auto px-4 py-8">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-center mb-12"
        >
          <h1 className="text-4xl md:text-6xl font-bold mb-6 gradient-text">
            AI Writing Assistant
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto mb-8">
            Professional content generation with advanced style customization. 
            Support for multiple LLM APIs including OpenAI, Claude, and more.
          </p>
        </motion.div>

        {/* Tab Navigation */}
        <motion.div 
          className="flex justify-center mb-8"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
        >
          <div className="glass-effect rounded-lg p-1 shadow-lg">
            <div className="flex space-x-1">
              <button
                onClick={() => setActiveTab('generate')}
                className={`flex items-center px-6 py-3 rounded-md font-medium transition-all ${
                  activeTab === 'generate'
                    ? 'bg-white text-indigo-600 shadow-md'
                    : 'text-gray-600 hover:text-indigo-600'
                }`}
              >
                <PenTool className="w-4 h-4 mr-2" />
                Content Generator
              </button>
              <button
                onClick={() => setActiveTab('optimize')}
                className={`flex items-center px-6 py-3 rounded-md font-medium transition-all ${
                  activeTab === 'optimize'
                    ? 'bg-white text-indigo-600 shadow-md'
                    : 'text-gray-600 hover:text-indigo-600'
                }`}
              >
                <Sparkles className="w-4 h-4 mr-2" />
                Text Optimizer
              </button>
            </div>
          </div>
        </motion.div>

        {/* Content */}
        <motion.div
          key={activeTab}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          transition={{ duration: 0.3 }}
        >
          {activeTab === 'generate' && <ContentGenerator />}
          {activeTab === 'optimize' && <TextOptimizer />}
        </motion.div>
      </main>
    </div>
  )
}